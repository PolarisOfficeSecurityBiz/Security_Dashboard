package com.polarisoffice.security.controller;

import com.polarisoffice.security.model.Customer;
import com.polarisoffice.security.repository.CustomerRepository;
import com.polarisoffice.security.service.ServiceService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import java.time.LocalDate;
import java.util.*;
import org.springframework.data.domain.Sort;

// ‚ñº ÎùºÏù¥ÏÑ†Ïä§
import com.polarisoffice.security.model.License;
import com.polarisoffice.security.service.LicenseService;
import com.polarisoffice.security.service.LicenseHistoryService;

// ‚ñº ÏÑúÎπÑÏä§ Îã¥ÎãπÏûê
import com.polarisoffice.security.repository.ServiceContactRepository;

@RequiredArgsConstructor
public class AdminCustomerController {

    // -----------------------
    // ‚úÖ 1) JSON (Ajax API)
    // -----------------------
    @RestController
    @RequestMapping("/admin/api/customers")
    @RequiredArgsConstructor
    static class Api {

        private final CustomerRepository customerRepository;
        private final ServiceService serviceService;

        /** Í≥†Í∞ùÏÇ¨ Î™©Î°ù JSON */
        @GetMapping("/list")
        public List<Map<String, Object>> getCustomerList() {
            List<Customer> customers = customerRepository.findAll();
            List<Map<String, Object>> result = new ArrayList<>();

            for (Customer c : customers) {
                Map<String, Object> m = new HashMap<>();
                m.put("customerId", c.getCustomerId());
                m.put("customerName", c.getCustomerName());
                m.put("createAt", c.getCreateAt());

                String connected = (c.getConnectedCompany() != null)
                        ? c.getConnectedCompany().getCustomerName() : "‚Äî";
                m.put("connectedCompanyName", connected);

                var svc = serviceService.getServicesByCustomerId(c.getCustomerId());
                m.put("serviceCount", svc != null ? svc.size() : 0);

                String serviceNames = (svc != null && !svc.isEmpty())
                        ? String.join(",", svc.stream().map(com.polarisoffice.security.model.Service::getServiceName).toList())
                        : "";
                m.put("services", serviceNames);

                result.add(m);
            }
            return result;
        }

        /** Í∞ÑÎã® KPI */
        @GetMapping("/metrics")
        public Map<String, Object> getMetrics() {
            Map<String, Object> m = new HashMap<>();
            m.put("total", customerRepository.count());
            // ÌïÑÏöî Ïãú Ïã§Ï†ú ÌÜµÍ≥Ñ Î°úÏßÅÏúºÎ°ú ÍµêÏ≤¥
            m.put("vguard", 0);
            m.put("secuone", 0);
            return m;
        }
    }

    // -----------------------
    // ‚úÖ 2) View (Thymeleaf ÌéòÏù¥ÏßÄ)
    // -----------------------
    @Controller
    @RequestMapping("/admin/customers")
    @RequiredArgsConstructor
    static class View {

        private final CustomerRepository customerRepository;
        private final ServiceService serviceService;

        // ÎùºÏù¥ÏÑ†Ïä§
        private final LicenseService licenseService;
        private final LicenseHistoryService licenseHistoryService;

        // Îã¥ÎãπÏûê
        private final ServiceContactRepository contactRepository;

        /** Í≥†Í∞ùÏÇ¨ Î™©Î°ù ÌéòÏù¥ÏßÄ (Î∑∞ Î†åÎçî Ïãú ÎìúÎ°≠Îã§Ïö¥ ÏòµÏÖò Ï£ºÏûÖ) */
        @GetMapping
        public String listPage(Model model) {
            model.addAttribute("allCustomers",
                customerRepository.findAll(Sort.by("customerName").ascending()));
            return "admin/customer/customers";
        }

        /** Í≥†Í∞ùÏÇ¨ ÏÉùÏÑ± (Î™®Îã¨ POST) */
        @PostMapping
        public String create(@RequestParam String customerName,
                             @RequestParam(required = false) String connectedCompany) {
            Customer c = new Customer();
            c.setCustomerId(UUID.randomUUID().toString());
            c.setCustomerName(customerName);
            if (connectedCompany != null && !connectedCompany.isBlank()) {
                customerRepository.findById(connectedCompany).ifPresent(c::setConnectedCompany);
            }
            c.setCreateAt(LocalDate.now());

            customerRepository.save(c);
            return "redirect:/admin/customers/" + c.getCustomerId();
        }

        /** Í≥†Í∞ùÏÇ¨ ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ */
        @GetMapping("/{id}")
        public String viewCustomerDetail(@PathVariable("id") String id, Model model) {
            Customer customer = customerRepository.findById(id)
                    .orElseThrow(() -> new IllegalArgumentException("Í≥†Í∞ùÏÇ¨ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

            String connectedCompanyName = customer.getConnectedCompany() != null
                    ? customer.getConnectedCompany().getCustomerName() : "‚Äî";

            var services = serviceService.getServicesByCustomerId(customer.getCustomerId());

            model.addAttribute("customer", customer);
            model.addAttribute("connectedCompanyName", connectedCompanyName);
            model.addAttribute("services", services);

            return "admin/customer/customer_detail";
        }

        /** ÏÑúÎπÑÏä§ ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ */
        @GetMapping("/{customerId}/services/{serviceId}")
        public String viewServiceDetail(@PathVariable String customerId,
                                        @PathVariable Integer serviceId,
                                        Model model) {

            Customer customer = customerRepository.findById(customerId)
                    .orElseThrow(() -> new IllegalArgumentException("Í≥†Í∞ùÏÇ¨ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

            // ÏÜåÏÜç Í≤ÄÏ¶ù Ìè¨Ìï® Ï°∞Ìöå
            com.polarisoffice.security.model.Service svc =
                    serviceService.getByIdAndCustomer(serviceId, customerId);

            // Îã¥ÎãπÏûê Î™©Î°ù (ÌÖúÌîåÎ¶øÏóêÏÑú contacts ÏÇ¨Ïö©)
            var contacts = contactRepository
                    .findByCustomer_CustomerIdAndServiceIdOrderByCreateAtDesc(customerId, serviceId);

            model.addAttribute("customer", customer);
            model.addAttribute("service", svc);
            model.addAttribute("contacts", contacts);

            return "admin/customer/service_detail";
        }

        // =========================================================
        // üü¢ ÎùºÏù¥ÏÑ†Ïä§ Î∞úÍ∏â (service_detailÏóêÏÑú 'Î∞úÍ∏âÌïòÍ∏∞')
        //   JS Ìèº ÌïÑÎìúÎ™Ö: expiryDate / usageLimit / licenseType / licenseVersion
        //   POST /admin/customers/{customerId}/services/{serviceId}/license
        // =========================================================
        @PostMapping("/{customerId}/services/{serviceId}/license")
        public String issueLicense(@PathVariable String customerId,
                                   @PathVariable Integer serviceId,
                                   @RequestParam("expiryDate") String expiryDate,
                                   @RequestParam(value = "usageLimit", required = false) Integer usageLimit,
                                   @RequestParam("licenseType") String licenseType,
                                   @RequestParam("licenseVersion") String licenseVersion) {

            // Í≤ÄÏ¶ù
            customerRepository.findById(customerId)
                    .orElseThrow(() -> new IllegalArgumentException("Í≥†Í∞ùÏÇ¨ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
            com.polarisoffice.security.model.Service svc =
                    serviceService.getByIdAndCustomer(serviceId, customerId);

            // Î∞úÍ∏â Ï≤òÎ¶¨ (ÏÑúÎπÑÏä§-ÎùºÏù¥ÏÑ†Ïä§ 1:1, issueForService ÎÇ¥Î∂ÄÏóêÏÑú service Îß§Ìïë/Ï†ÄÏû•)
            licenseService.issueForService(svc, expiryDate, usageLimit, licenseType, licenseVersion);

            return "redirect:/admin/customers/" + customerId + "/services/" + serviceId + "/license";
        }

        // =========================================================
        // üü¢ ÎùºÏù¥ÏÑ†Ïä§ ÏÉÅÏÑ∏ (ÏÑúÎπÑÏä§ ‚Üí ÎùºÏù¥ÏÑ†Ïä§ ÌéòÏù¥ÏßÄ)
        //   ÏóÜÏúºÎ©¥ ÏÑúÎπÑÏä§ ÏÉÅÏÑ∏Î°ú Î¶¨Îã§Ïù¥Î†âÌä∏(+ ?open=license Î°ú Î™®Îã¨ Ïò§Ìîà ÌûåÌä∏)
        //   GET /admin/customers/{customerId}/services/{serviceId}/license
        // =========================================================
        @GetMapping("/{customerId}/services/{serviceId}/license")
        public String viewLicenseDetail(@PathVariable String customerId,
                                        @PathVariable Integer serviceId,
                                        Model model) {

            Customer customer = customerRepository.findById(customerId)
                    .orElseThrow(() -> new IllegalArgumentException("Í≥†Í∞ùÏÇ¨ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

            com.polarisoffice.security.model.Service svc =
                    serviceService.getByIdAndCustomer(serviceId, customerId);

            return licenseService.findByServiceId(serviceId)
                    .map(lic -> {
                        model.addAttribute("customer", customer);
                        model.addAttribute("service", svc);
                        model.addAttribute("license", lic);
                        model.addAttribute("histories",
                                licenseHistoryService.findByLicenseIdOrderByCreateAtDesc(lic.getLicenseId()));
                        return "admin/customer/license_detail";
                    })
                    .orElse("redirect:/admin/customers/" + customerId + "/services/" + serviceId + "?open=license");
        }
    }
}

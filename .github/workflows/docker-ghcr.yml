name: Build & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      # ✅ GHCR 로그인 (개인 계정 PAT 사용)
      - name: Login to GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: lily-b-lee
          password: ${{ secrets.PROD_DOCKER_PAT }}

      # ✅ Build & Push Docker image
      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/lily-b-lee/security_dashboard:latest
            ghcr.io/lily-b-lee/security_dashboard:${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted
    env:
      IMAGE_TAG: ${{ github.sha }}
      APP_DIR: /home/posacuser/apps/security_dashboard

    steps:
      - name: Sanity check (docker/compose)
        run: |
          set -euxo pipefail
          whoami
          docker --version
          docker compose version || docker-compose --version || true

      # ✅ GHCR 로그인 (pull 시 동일 토큰 사용)
      - name: Login GHCR (pull)
        run: |
          echo "${{ secrets.PROD_DOCKER_PAT }}" | docker login ghcr.io -u lily-b-lee --password-stdin

      # ✅ 이미지 존재 여부 확인
      - name: Check image exists
        run: |
          set -euxo pipefail
          docker pull ghcr.io/lily-b-lee/security_dashboard:${IMAGE_TAG} || {
            echo "❌ Image tag not found: ${IMAGE_TAG}"
            exit 1
          }

      # ✅ .env 작성 및 compose 실행
      - name: Write .env & compose up
        run: |
          set -euxo pipefail
          cd "${APP_DIR}"

          cat > .env <<EOF
          IMAGE_TAG=${IMAGE_TAG}
          MYSQL_DATABASE=polaris_security
          MYSQL_USER=polaris
          MYSQL_PASSWORD=secuone
          MYSQL_ROOT_PASSWORD=secuone
          EOF

          if docker compose version >/dev/null 2>&1; then
            docker compose pull
            docker compose up -d
          else
            docker-compose pull
            docker-compose up -d
          fi

          docker image prune -f

      # ✅ 배포 후 상태 출력
      - name: Show status
        run: |
          set -euxo pipefail
          cd "${APP_DIR}"
          if docker compose version >/dev/null 2>&1; then
            docker compose ps
            docker compose logs -n 80
          else
            docker-compose ps
            docker-compose logs -n 80
          fi
